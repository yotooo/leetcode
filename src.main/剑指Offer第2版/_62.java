package 剑指Offer第2版;

import java.util.LinkedList;

public class _62 {
    /**
     * 剑指 Offer 62. 圆圈中最后剩下的数字
     * 0,1,・・・,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字（删除后从下一个数字开始计数）。求出这个圆圈里剩下的最后一个数字。
     *
     * 例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。
     *
     *
     *
     * 示例 1：
     *
     * 输入: n = 5, m = 3
     * 输出: 3
     * 示例 2：
     *
     * 输入: n = 10, m = 17
     * 输出: 2
     */
    public int lastRemaining(int n, int m) {
        LinkedList<Integer> list = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            list.add(i);
        }
        int index = 0;
        m--;
        while (list.size()!=1){
            index = (m+index)%list.size();
            list.remove(index);
        }
        return list.get(0);
    }

    public static void main(String[] args) {
        _62 v = new _62();
        System.out.println(v.lastRemaining(56795, 87778));
    }
}
